# -*- Mode: perl; indent-tabs-mode: nil -*-
# Copyright(c) 2003-2007 Robert L. Brown.  This is licensed software
# only to be used with an explicit right-to-use license from the
# copyright holder.


package Query;



=head1 NAME

    QUery - manage the candidate common query code

=head1 SYNOPSIS

  Note: this is a non-OO interface

    use Query;

=head1 DESCRIPTION

=over 4

=item Query::getJavaScript();

Returns a string containing the JavaScript that should be put into the <head>
    section of any pages that use the query form managed by this pacakge.

    my $script = Query::getJavaScript();
print start_html({-script=>$script});

=item Query::standardForm($)

Returns a string of HTML that comprises the standard query form.  The given string
parameter must be the name of the <FORM> that this HTML will be within.  Note that
the <FORM> tag itself is not generated by this method.  The caller must create the
form explicitly.

my $formname = "myformname";
my $html = Query::standardForm($formname);
print Layout::startForm({-name=>$formname});
print $html;
print Layout::endForm;

=item Query::makeQuery()

This method processes the form data from a Query::standardQuery() and should be
called from when processing te POST from the query form.

Returns two scalars.  The first scalar is a SQL query that can be used to query the
database for the candidates that match the query stored in form data.
The second is a reference to an array of strings that should be used as the
hash keys of a hash to store the values returned by executing the query.
This array reference should be passed into Query::extendedResults().

my ($query, $hashes) = Query::makeQuery();
my @results = Query::extendedResults($query, $hashes);

=item Query::extendedResults($$)

Parameters are the query string and hash key array reference returned by Query::makeQuery().
Returns a reference to an array of hases containing the results of the query.

my @results = Query::extendedResults($query, $hashes);
foreach my $ref ( @results ) {
    foreach my $val ( keys %$ref ) {
        print "$val = $$ref{$val}\n";
    }
}

=back

=cut

use 5.00;   
use strict;
our($VERSION, @ISA, @EXPORT, @EXPORT_OK);

$VERSION = "1.00";
require Exporter;
@ISA=('Exporter');

@EXPORT = qw(
    &getJavaScript
    &standardForm
    &makeQuery
);

@EXPORT_OK = qw();

require "globals.pl";
use CandidateTable;
use RecruiterTable;

use Layout;
use OptionMenuWidget;
use Opening;
use Argcvt;
use Database;
use Utility;


use CGI qw(:standard *table *ol *ul *Tr *td escape *p);
use CGI::Util qw(escape);
use Login;
use Database;
use Argcvt;

BEGIN {

##
## This Javascript code is lifted from Bugzilla and changes the "Opening" selector
## contents as the "Department" selector contents changes.
##

$::JSCRIPT1 = <<'EOF';
var first_load = true;
var last_depts = new Array();

var openings = new Array();

EOF

$::JSCRIPT2 = <<'EOF';


//
// selectDepartment - called when the department option list changes value.
//
// Inputs:
//    f ... form object
//
function selectDepartment(f)
{
    // do nothing the first time with nothing selected

    if (first_load && f.department.selectedIndex == -1) {
        first_load = false;
        return;
    }
    first_load = false;

    // build the array of selected departments, by value.
    // if no department is selected then get ALL department values
    // the department values are later used as indices into the "openings" arrays

    depts = getSelectedOrAllValues(f.department);

    // If there are openings currently selected, we want them to be still selected
    //   after the new list of possible departments is put into the openings list.
    // Get the currently selected items in the openings list and then
    //   merge them back into the list after building the set of possibilities.

    var currentOpenings = getSelectedValues(f.opening_id);

    populateControl(depts, openings, f.opening_id);

    setSelectedValues(f.opening_id, currentOpenings);
}

// populateControl - update a select form element (targetElement) given zero or
//                   values of some other select that defines the domain of
//                   maps that convert domain values to range (value,label)
//                   pairs.  This assumes that the code has access to the
//                   range arrays which are defined as
//
// range[0] = [ [value0, label0], [value1, label1], ... ];
// range[1] = ...

function populateControl(domain, range, targetElement)
{
    var i, labels, values;

    if (domain.length < 1 || range.length < 1) {
        targetElement.options.length = 0;
    }

    // if there is exactly one domain value selected, use its range array.
    // if there is more than one, merge together the range arrays

    if ( domain.length == 1 ) {
        values = range[domain[0]];
    } else { 
        values = new Array();
        for (i = 0; i < domain.length; i++) {
            values = mergeArrays(values, range[domain[i]]);
        }
    }
    values.sort(sortSelect);
    targetElement.options.length = 0;
    for (i = 0; i < values.length; i++) {
        targetElement.options[i] = new Option(values[i][0], values[i][1]);
    }
}

function sortSelect(a,b)
{
    var s1 = a[0].toLowerCase();
    var s2 = b[0].toLowerCase();
    if ( s1 == s2 ) {
        return 0;
    }
    if ( s1 < s2 ) {
        return -1;
    }
    return 1;
}


// mergeArrays - merge the contents of two arrays

function mergeArrays(a, b) {
    var ret = new Array();
    var i;
    for ( i=0 ; i<a.length ; i++ ) {
        ret[ret.length] = a[i];
    };
    for ( i=0 ; i<b.length ; i++ ) {
        ret[ret.length] = b[i];
    };
    return ret;
}

//
// getSelectedValues - return an Array of selected values from a control
//
// This returns precisely what is selected.  If nothing is selected, nothing is returned.
//

function getSelectedValues(control)
{
    var result = new Array();
    for ( var i=0 ; i<control.length ; i++ ) {
        if ( control.options[i].selected ) {
            result[result.length] = control.options[i].value;
        }
    }
    return result;
}

//
// getSelectedOrAllValues - return an Array of selected values from a control
//
// This returns the entire control values if nothing is selected
//

function getSelectedOrAllValues(control)
{
    var result = new Array();
    var noneSelected = control.selectedIndex == -1;
    for ( var i=0 ; i<control.length ; i++ ) {
        if ( noneSelected || control.options[i].selected ) {
            result[result.length] = control.options[i].value;
        }
    }
    return result;
}

function setSelectedValues(control, values)
{
    for (var i=0; i < values.length; i++) {
        for (var j=0; j < control.options.length; j++) {
            if (control.options[j].value == values[i]) {
                control.options[j].selected = true;
            }
        }
    }
}


EOF
                              };


sub getJavaScript
{
    
    ##
    ## Generate the JavaScript.  This adds assignment statements in between 
    ## $::JSCRIPT1 and $::JSCRIPT2 to map department numbers into job openings
    ##
    
    my @openings = getAllRecords({-table=>\%::OpeningTable});
    my @depts = getAllRecords({-table=>\%::DepartmentTable});
    
    my $jscript = $::JSCRIPT1;
    foreach my $d ( @depts ) {
        
        ## Dump the labels and the PKs for the openings
        my $ind = $$d{'id'};
        my $sep = "";
        my $openings = "openings[$ind] = [ ";
        foreach my $o ( @openings ) {
            if ( $$o{'department_id'} != $$d{'id'} ) {
                next;
            }
            my $str = Opening::menuLabel($o);
            $str =~ s/'/\\'/;
            $openings .= $sep . "['$str'," . Opening::getId($o) . "]";
            $sep = ", ";
        }
        $openings .= " ];\n";
        $jscript .= $openings;
    }
$jscript .= $::JSCRIPT2;
    
    ## Now pick up the date picker code
    
    open FH,$::DATE_JAVASCRIPT and do {
        while ( <FH> ) {
            $jscript .= $_;
        }
        close FH;
    };
    return $jscript;
}


sub standardForm($)
{
    my $form = shift;
    my $result;
    my $border = 0;  # for debugging layout
    
    $result .= start_table({-width=>"100%", -border=>$border});;
    $result .= Tr({-bgcolor=>"#ffffff"},
                  td(b("Status")),
#			 td(b("Department")),
                  td(b("Opening")),
                  td(b("Next Action")),
                  td(b("Owner")),
                  );
    my $tcol = Layout::findColumn({-table=>\%::CandidateTable,
                                   -column=>"status"});
    my $default = undef;
    if ( defined $tcol && exists $$tcol{'default'} ) {
        $default = $$tcol{'default'};
    }
    $result .= Tr({-bgcolor=>"#ffffff"},
                  td({-valign=>"top"},
                     OptionMenuWidget::widget({
                         -table=>\%::CandidateTable,
                         -column=>"status",
                         -form=>$form,
                         -multiple=>1,
                         -default=>$default,
                         -size=>10,
                     })), "\n",
                  td({-valign=>"top"},
                     OptionMenuWidget::widget({
                         -table=>\%::DepartmentTable,
                         -column=>"name",
                         -form=>$form,
                         -name=>"department",
                         -multiple=>1,
                         -onchange=>"selectDepartment(this.form);"}), "\n",
                     br, "\n",
                     OptionMenuWidget::widget({
                         -table=>\%::OpeningTable,
                         -column=>"description",
                         -form=>$form,
                         -name=>"opening_id",
                         -multiple=>1,
                         -skipfilters=>["active"],
                     })), "\n",
                  td({-valign=>"top"},
                     OptionMenuWidget::widget({
                         -table=>\%::ActionTable,
                         -column=>"action",
                         -form=>$form,
                         -name=>"action_id",
                         -multiple=>1,
                         -size=>10,
                         -skipfilters=>["active"],
                     })), "\n",
                  td({-valign=>"top"},
                     OptionMenuWidget::widget({
                         -table=>\%::UserTable,
                         -column=>"name",
                         -form=>$form,
                         -name=>"owner_id",
                         -multiple=>1,
                         -size=>10,
                         -null=>"NOBODY",
                         -skipfilters=>["active"],
                     })), "\n",
                  );
    
    $result .= end_table .  "\n";
    $result .= br();

    ##
    ## The next major row of the query form contains, among other things, the recruiter which is
    ## implemented as a switch, so addVariant is needed to insert the javascript to turn on and
    ## off form elements based on the switch setting
    ##

    ## This table is five columns wide

    $result .= start_table({-width=>"100%",-border=>$border, -bgcolor=>"#ffffff"}) .  "\n";

    ## NAME LIKE

    my $args;

    $result .= Tr(
                  td({-align=>"right"},
                     b("Name like: "),
                     ), "\n",
                  td({-colspan=>"4"},
                     textfield({-name=>"name",size=>"40"}),
                     " % (percent sign) matches anything",
                     ), "\n",
                  );

    ##------------ begin REFERRER row
    ## - Referrer type on the left, value (either name or recruiter) on the right

    $result .= start_Tr;

    ## referrer_type - the switch

    $result .= td(
                  {
                      -align=>"right",
                      -rowspan=>"2",
                  },
                  b("Referrer Type:"),
                  ) . "\n";
    #------------ end column 1
    $args = {
        -table=>\%::CandidateTable,
        -column=>"referrer_type",
        -size=>"6",
        -multiple=>"1",
    };
    Layout::addVariant({
        -table=>\%::CandidateTable,
        -column=>"referrer_type",
        -args=>$args,
    });
    $$args{'form'} = $form;
    $result .= td(
                  {
                      -rowspan => "2",
                  },
                  OptionMenuWidget::widget($args),
                  ) . "\n";

    #------------ end column 2

    $result .= td({-rowspan=>"2", -width=>"16"}) . "\n";  # SPACER

    #------------
    ## Now either the referrer patern or the recruiter ID
    ## Both of these form elements must be wrapped in a <DIV> so that they can be turned on and off

    ## REFERRER 

    $result .= td({-align=>"right"},
                  b("Referrer like: "),
                  ) . "\n";
    $args = {
        -name=>"referrer",
        -size=>"40",
    };
    Layout::addVariant({
        -table=>\%::CandidateTable,
        -column=>"referrer",
        -args=>$args,
    });
    $result .= td(
                  Layout::variantDiv(
                                     {
                                         -column=>"referrer",
                                     },
                                     textfield($args),
                                     ),
                  ) . "\n";

    $result .= end_Tr . "\n";

    #------------ end row 1 of Referrer Section

    ## begin row 2 of referrer section
    ## The first three columns are occupied in this row through the rowspan of the top row columns

    $result .= start_Tr . "\n";

    ## RECRUITER

    $args = {
        -table=>\%::RecruiterTable,
        -name=>"recruiter_id",
        -form=>$form,
        -column=>"name",
        -multiple=>1,
        -skipfilters=>["active"],
    };
    Layout::addVariant({
        -table=>\%::CandidateTable,
        -column=>"referrer",
        -args=>$args,
    });
    $result .= td(
                  {
                      -align=>"right",
                  },
                  b("Recruiter:"),
                  ) . "\n";
    $result .= td(
                  Layout::variantDiv({
                      -column=>"recruiter_id",
                  },
                                     OptionMenuWidget::widget($args),
                                     ),
                  ) . "\n";
    $result .= end_Tr . "\n";

    #------------ begin date row
    my ($seconds, $minutes, $hours, $day_of_month, $month, $year,$wday, $yday, $isdst) = localtime(time);
    my $today = sprintf("%04d-%02d-%02d", 1900+$year, $month+1, $day_of_month);

    $result .= Tr(
                  td({-align=>"right"}, b("Created on or after:")), "\n",
                  td(textfield({-name=>"start", -size=>"9"}), "\n",
                     a({-href=>"javascript:show_calendar('$form.start');"},
                       img({-src=>"images/show_calendar.gif", -border=>"0"})), "\n",
                     ),
                  td({-width=>"16"}, "&nbsp;"),
                  td({-align=>"right"}, b("")),
                  td(""),
                  ) .
        Tr(
           td({-align=>"right"},
                     b(" and before"), "\n",
              ),
           td(
                     textfield({-name=>"end", -size=>"9", -default=>$today}), "\n", 
                     a({-href=>"javascript:show_calendar('$form.end');"},
                       img({-src=>"images/show_calendar.gif", -border=>"0"}))), "\n",
                  td({-width=>"16"}, "&nbsp;"),
                  td({-align=>"right"}, b("")),
                  td(""),
           );
    $result .= end_table;

    return $result;
}

sub makeURL
{
    my $argv = shift;
    argcvt($argv, [],
           ['status','action','owner','opening','department','start','end','name','referrer','referrer_type', 'nohide']);

    my $params = "?op=query";
    $params .= join(";status=", ("", map { escape($_) } @{$$argv{'status'}}));
    $params .= join(";action_id=", ("", map { escape($_) }  @{$$argv{'action'}}));
    $params .= join(";owner_id=", ("", map { escape($_) }  @{$$argv{'owner'}}));
    $params .= join(";department_id=", ("", map { escape($_) }  @{$$argv{'department'}}));
    $params .= join(";opening_id=", ("", map { escape($_) }  @{$$argv{'opening'}}));
    $$argv{'referrer'} and $params .= ";referrer=" . escape($$argv{'referrer'});
    $params .= join(";referrer_type=", ("", map { escape($_) } @{$$argv{'referrer_type'}}));
    $params .= join(";recruiter_id=", ("", map { escape($_) }  @{$$argv{'recruiter'}}));
    $$argv{'name'} and $params .= ";name=" . escape($$argv{'name'});
    $$argv{'start'} and $params .= ";start=" . escape($$argv{'start'});
    $$argv{'end'} and $params .= ";end=" . escape($$argv{'end'});

    return $params;
}

##
##  makeQuery - form a DB query from the FORM data resulting from a POST of the standardForm
##
## Assumptions:
##    1. Database connection has already been made
##

sub makeQuery
{
    my $argv = shift;
    argcvt($argv, [], []);

    my @status = param("status");
    my $name = param("name");
    my $referrer = param("referrer");
    my @referrer_type = param("referrer_type");
    my @recruiter = param("recruiter_id");
    my @action = param ("action_id");
    my @owner = param ("owner_id");
    my @department = param("department");
    my @pks = param("pks");
    my $start = param("start");
    my $end = param("end");
    my @opening = param("opening_id");

    return constructQuery({
        -status=>\@status,
        -action=>\@action,
        -owner => \@owner,
        -department => \@department,
        -start => $start,
        -end => $end,
        -name => $name,
        -referrer => $referrer,
        -referrer_type => \@referrer_type,
        -recruiter=>\@recruiter,
        -opening => \@opening,
        -pks => \@pks,
    });
}

sub constructQuery
{
    my $argv = shift;
    argcvt($argv, [], ['status','action','owner','opening','department','start','end',
                       'name','referrer','referrer_type', 'recruiter', 'nohide', 'pks']);

    
    my ($selects, $tables, $joins, $hashes);
    ($selects, $tables, $joins, $hashes) = formJoinQuery({-table=>\%::CandidateTable,
                                                          -follow=>1
                                                          });

    my $where = makeWhereClause($argv);

    my $query = "SELECT $selects FROM $tables $joins $where";
    return ($query, $hashes);
}

sub makeWhereClause
{
    my $argv = shift;
    argcvt($argv, [], ['status','action','owner','opening','department','start','end',
                       'name','referrer','referrer_type', 'recruiter', 'nohide', 'pks']);

    my $nohide = $$argv{'nohide'};

    my $where = "";
    my $and = " WHERE";
    if ( exists $$argv{'status'} && scalar @{$$argv{'status'}} > 0 ) {
        $where .= "$and ";
        $where .= doDisjunction("candidate", "status", $$argv{'status'}, 0);
        $and = " AND";
    }
    if ( exists $$argv{'name'} && $$argv{'name'} ) {
        $where .= "$and candidate.name LIKE " . SQLQuote("%$$argv{'name'}%");
        $and = " AND";
    }

    ## TODO: if there are values defined for both the referrer string and the recruiter id,
    ##       then these should be OR'd together, not anded.  This is because they are
    ##       never present at same time in a single candidate record and their values
    ##       in the query can only be defined if multiple selections in the "referrer_type"
    ##       parameter exist.
    ## 1) always include the disjunction of the referrer_type.
    ## 2) treat referrer and recruiter_id together in a disjunction.
    ## Examples:
    ## (referrer_type = 'INTERNAL' OR referrer_type = 'RECRUITER') AND
    ##    (referrer LIKE 'nimrod' OR recruiter_id = 15)

    if ( exists $$argv{'referrer_type'} && scalar @{$$argv{'referrer_type'}} > 0 ) {
        $where .= "$and ";
        $where .= doDisjunction("candidate", "referrer_type", $$argv{'referrer_type'}, 0);
        $and = " AND";
    }

    my $start_referrer = '(';
    my $end_referrer = ')';
    my $combine_referrer = '';
    if ( exists $$argv{'referrer'} && $$argv{'referrer'} ) {
        $where .= "$and $start_referrer candidate.referrer LIKE " . SQLQuote("%$$argv{'referrer'}%");
        $start_referrer = "";
        $combine_referrer = " OR ";
        $and = "";
    }
    if ( $$argv{'recruiter'} && exists $$argv{'recruiter'} && scalar @{$$argv{'recruiter'}} > 0 ) {
        $where .= "$and $start_referrer $combine_referrer ";
        $where .= doDisjunction("candidate", "recruiter_id", $$argv{'recruiter'}, 1) . $end_referrer;
        $and = " AND";
    }
    ## XXX 4/14/2005: wolf fence the above query generation requires more testing


    if ( $$argv{'action'} && exists $$argv{'action'} && scalar @{$$argv{'action'}} > 0 ) {
        $where .= "$and ";
        $where .= doDisjunction("candidate", "action_id", $$argv{'action'}, 1);
        $and = " AND";
    }
    if ( exists $$argv{'owner'} && scalar @{$$argv{'owner'}} > 0 ) {
        $where .= "$and ";
        $where .= doDisjunction("candidate", "owner_id", $$argv{'owner'}, 1);
        $and = " AND";
    }
    if ( exists $$argv{'start'} && $$argv{'start'} && exists $$argv{'end'} && $$argv{'end'}) {
        $where .= "$and ";
        $where .= "date(candidate.creation) BETWEEN " . SQLQuote($$argv{'start'}) . " AND " . SQLQuote($$argv{'end'});
        $and = " AND";
    }
    if ( $$argv{'opening'} && exists $$argv{'opening'} && scalar @{$$argv{'opening'}} > 0 ) {
        $where .= "$and ";
        $where .= doDisjunction("candidate", "opening_id", $$argv{'opening'}, 1);
        $and = " AND";
    } else {
        if ( exists $$argv{'department'} && scalar @{$$argv{'department'}} > 0 ) {
            $where .= "$and ";
            $where .= doDisjunction("opening", "department_id", $$argv{'department'}, 0);
            $and = " AND";
        }
    }
    if ( $$argv{'pks'} && scalar(@{$$argv{'pks'}}) > 0 ) {
        $where .= "$and ";
        $where .= "candidate.id IN (" . join(",", @{$$argv{'pks'}}) . ")";
        $and = " AND";
    }
    
    if ( !$nohide && !isAdmin() ) {
        $where .= "$and candidate.hide = " . SQLQuote(0);
    }
    return $where;
}


sub doDisjunction
{
    my ($table,$column,$list,$donull) = (@_);

    my $query = "";

    if ( scalar @$list == 1 ) {
        if ( $donull && !$$list[0] ) {
            $query .= "($table.$column = " . SQLQuote($$list[0]) . " OR $table.$column IS NULL)";
        } else {
            $query .= "$table.$column = " . SQLQuote($$list[0]);
        }
    } elsif ( scalar @$list > 1 ) {
        $query .= "(";
        my $or = "";
        foreach my $v ( @$list ) {
            $query .= "$or $table.$column = " . SQLQuote($v);
            $or = " OR";
            if ( $donull && $v == 0 ) {
                $query .= "$or $table.$column IS NULL";
                $or = " OR";
            }
        }
        $query .= " )";
    }
    return $query;
}

sub extendedResults
{
    my ($query, $hashes) = @_;

    my @results = ();

    SQLSend($query);

    my @row;
    while ( @row = SQLFetchData()) {
        if ( scalar @row != scalar @$hashes ) {
            Utility::redError("Row and Hash list are different sizes: " . scalar(@row) . " and " . scalar(@$hashes));
          }
        my $rec = {};
        for ( my $i=0 ; $i<scalar(@row) ; $i++ ) {
            $rec->{$$hashes[$i]} = $row[$i];
        }
        push @results, $rec;
    }

    ##
    ## Tally up the number of comments and attached documents for each matched result, if any
    ##

    my %docs;
    my %coms;
    my %mycoms;
    my %rats;
    my %myrats;
    my %ratsavg;
    my %userratings;
    my %usercomments;

    my $login_id = Login::getLoginId();
    if ( scalar @results > 0 ) {
        
# select candidate_id,count(*) from document where candidate_id IN ( 1,2,3, ... ) group by candidate_id;
# select candidate_id,count(*) from comment where candidate_id IN (1,,3, ...) group by candidate_id;
	
        my $where = "candidate_id IN (";
        my $sep = "";
        foreach my $r (@results) {
            $where .= "$sep" . $r->{'id'};
            $sep = ",";
        }
        $where .= ')';
        SQLSend("SELECT candidate_id,COUNT(*) FROM document WHERE $where GROUP BY candidate_id");
        my ($cid, $cnt);
        while( ($cid,$cnt)=SQLFetchData()) {
            $docs{$cid} = $cnt;
        }

        ## Collect the comments sata, overall, for current user, and each user
        
        SQLSend("SELECT candidate_id,COUNT(*) FROM comment WHERE $where GROUP BY candidate_id");
        while( ($cid,$cnt)=SQLFetchData()) {
            $coms{$cid} = $cnt;
        }

        ## Count the number of comments that were submitted by ME
        if ( $login_id ) {
            SQLSend("SELECT candidate_id,COUNT(*) FROM comment WHERE $where AND user_id = $login_id GROUP BY candidate_id");
            while( ($cid,$cnt)=SQLFetchData()) {
                $mycoms{$cid} = $cnt;
            }
        }
        SQLSend("SELECT candidate_id, user_id, COUNT(*) from comment where $where group by candidate_id, user_id");
        while ( my ( $cid,$user,$cnt) = SQLFetchData()) {
            if ( !exists $usercomments{$cid} ) {
                $usercomments{$cid} = {};
            }
            $usercomments{$cid}->{$user} = $cnt;
        }

        ## Collect the rating data, overall and for the current user

        SQLSend("SELECT candidate_id,COUNT(rating),AVG(rating) from rating WHERE $where GROUP BY candidate_id");
        while ( my ($cid,$cnt,$avg)=SQLFetchData()) {
            $ratsavg{$cid} = $avg;
            $rats{$cid} = $cnt;
        }
        # Compute the average of my ratings
        SQLSend("SELECT candidate_id,COUNT(rating) from rating WHERE $where AND user_id = $login_id GROUP BY candidate_id");
        while ( ($cid,$cnt)=SQLFetchData()) {
            $myrats{$cid} = $cnt;
        }

        SQLSend("SELECT candidate_id, user_id, count(rating) from rating where $where group by candidate_id, user_id");
        while ( my ($cid,$user,$cnt) = SQLFetchData()) {
            if ( !exists $userratings{$cid} ) {
                $userratings{$cid} = {};
            }
            $userratings{$cid}->{$user} = $cnt;
        }
    }

    ##
    ## augment the results array with computed results
    ##

    foreach my $r ( @results ) {
        $r->{'comments'} = $coms{$r->{'id'}} || 0;
        $r->{'mycomments'} = $mycoms{$r->{'id'}} || 0;
        if ( $r->{'comments'} > 0 || $r->{'mycomments'} > 0 ) {
            $r->{'commentstr'} = sprintf("%d / %d", $r->{'mycomments'}, $r->{'comments'});
        } else {
            $r->{'commentstr'} = "";
        }
        $r->{'usercomments'} = $usercomments{$r->{'id'}};
        $r->{'documents'} = $docs{$r->{'id'}};
        $r->{'ratings'} = ($rats{$r->{'id'}} || 0);
        $r->{'rating_avg'} = ($ratsavg{$r->{'id'}} || 0);
        $r->{'myratings'} = ($myrats{$r->{'id'}} || 0);
        $r->{'ratingstr'} = sprintf("%d / %d &nbsp;%.1f", $r->{'myratings'}, $r->{'ratings'}, $r->{'rating_avg'});
        $r->{'userratings'} = $userratings{$r->{'id'}};
        my $delta = time()-$r->{'u_creation'};
        my $days = int($delta/(60*60*24));
        my $hours = int(($delta - $days*(60*60*24))/(60*60));
        $r->{'age'} = $delta;
        if ( $days > 365 ) {
            $r->{'agestr'} = sprintf("%dy %dw %dd", int($days/365),int(($days%365)/7), $days%7);
        } elsif ( $days >= 7 ) {
            $r->{'agestr'} = sprintf("%dw %dd", int($days/7), $days%7);
        } else {
            $r->{'agestr'} = sprintf("%dd %dh", $days, $hours);
        }
        $r->{'havecontact'} =
            $r->{'homephone'} ||
            $r->{'workphone'} ||
            $r->{'cellphone'} ||
            $r->{'homeemail'} ||
            $r->{'workemail'};
    }
#	print Utility::ObjDump(\@results);
    return @results;
}

sub countResults
{
    my ($query, $hashes) = @_;

    my @results = ();

    SQLSend($query);

    return SQLAffectedRows();
}


1;
